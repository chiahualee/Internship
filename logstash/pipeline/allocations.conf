input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://bell.psc.edu:5494/allocations?ssl=true&sslmode=require"
        jdbc_user => "alloc_read"
        jdbc_password => "Alloc_R34D"
        jdbc_validate_connection => true
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.2.2.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        statement => "SELECT * FROM all_data order by id"
    }
}

filter{

    ruby{
        init => "$job_ids = Hash.new;"
        code => '

        # geo data
        if event.get("[lat]").nil?
            event.set("lat", 0)
        end
        if event.get("[long]").nil?
            event.set("long", 0)
        end 

        # Date processing
        if ($job_ids.has_key? event.get("[job_id]")) && (!event.get("[short_date]").nil?)
            event.set("prorated_job_start_time",event.get("[short_date]")+ "T00:00:01.000Z")
        elsif !($job_ids.has_key? event.get("[job_id]"))
            $job_ids [event.get("[job_id]")]= 1
            event.set("prorated_job_start_time",event.get("[job_start_time]"))
        end  


        # Department

        if event.get("[department]")!=nil && event.get("[affiliation]")=="Carnegie Mellon University" && ["heinz","public policy","public health","mism","ism","information systems Management"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "Heinz College") 

        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["cit","engineering", "civil", "mechanical","materials","information networking","eecs","biomedical","computer science and engineering","ee","ece","mche"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "College of Engineering") 

        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["mellon college of science","mathematics",",mathematical","math","physics","chemistry","biological science","pgss","penna","governor","nmr center"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "Mellon College of Science") 

        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["human computer interaction","computer science","ri","robotics","hci","human-computer interaction","machine learning","lti","language technologies institute","language technology institute","biology","software research","scs","cs","ini","bic","10701","10-701","10-703","parallel data lab","language technologies","language and technologies","robotic"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "School of Computer Science") 

        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["business","tepper","computational finance","finance","gsia"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "Tepper School of Business") 
        
        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["dietrich","economics","english","modern languages","philosophy","psychology","history","decision sciences","statistics","information systems"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "Dietrich College") 

        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["architecture","art","design","drama","music"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "College of Fine Arts") 

        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["sei","software engineering"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "Software Engineering Institute") 
        
        elsif event.get("[affiliation]")=="Carnegie Mellon University" && event.get("[department]")!=nil && ["psc","pittsburgh supercomputing center","ray scott"].any? { |word| event.get("[department]").downcase.include?(word) }
            event.set("dept", "Pittsburgh Supercomputing Center") 

        elsif event.get("[affiliation]")=="Carnegie Mellon University" 
            event.set("dept", "Others") 
 
        end


        '
    }
    mutate { rename => {"lat" => "[location][lat]"} }
    mutate { rename => {"long" => "[location][lon]"} }
}
    

output {
    stdout {codec => rubydebug} # For debug 
    elasticsearch {
      hosts => ["rubber.bridges.psc.edu:9200"]
      index => "my_index"
      document_type => "_doc"
      document_id => "%{job_id}-%{short_date}"
    }
}